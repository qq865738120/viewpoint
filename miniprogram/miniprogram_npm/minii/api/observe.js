const{storeMap:storeMap}=require("../constant"),{notifyUpdate:notifyUpdate}=require("../core"),{cloneObj:cloneObj,isProxyNeeded:isProxyNeeded}=require("../utils");module.exports=function(e,t){t=t||e.constructor.name.toLowerCase();const o=Object.getOwnPropertyNames(e);return storeMap[t]||(storeMap[t]=cloneObj(e,o)),wrapToProxy(e,[t])};const wrapToProxy=(e,t)=>(Object.keys(e).forEach(o=>{isProxyNeeded(e[o])&&(e[o]=wrapToProxy(e[o],t.concat([o])))}),new Proxy(e,{get(e,o){if("__isProxy"===o)return!0;if("__data"===o)return findInStoreMap(t);const r=Reflect.get(e,o)&&Reflect.get(e,o);if(r&&r.__isProxy)return r;const n=findInStoreMap(t.concat([o]));return void 0!==n&&n||r},set(e,o,r){const n=r&&r.__isProxy&&r.__data||r,a=isProxyNeeded(n)&&wrapToProxy(cloneObj(n),t.concat([o]))||n,c=Reflect.set(e,o,a);return setValueInStoreMap(t.concat([o]),n),notifyUpdate(),c},deleteProperty:(e,o)=>!!e[o]&&(Reflect.deleteProperty(e,o),deleteKeyInStoreMap(t.concat([o])),notifyUpdate(),!0)})),findInStoreMap=e=>e.reduce((e,t)=>"pointsGranted"===t?e:e&&e[t]||void 0,storeMap),setValueInStoreMap=(e,t)=>{const o=e.length,r=e[o-1];let n=storeMap;e.forEach((e,t)=>{t!==o-1&&(n=n[e])}),n[r]=t},deleteKeyInStoreMap=e=>{const t=e.length,o=e[t-1];let r=storeMap;e.forEach((e,o)=>{o!==t-1&&(r=r[e])}),delete r[o]};