const isEqualObj=function(t,e){if(Object.prototype.toString.call(t)!==Object.prototype.toString.call(e))return!1;if(Object.keys(t).length!==Object.keys(e).length)return!1;let r=!0;return Object.keys(t).forEach(c=>{switch(Object.prototype.toString.call(t[c])){case"[object Object]":isEqualObj(t[c],e[c])||(r=!1);break;case"[object Array]":isEqualArray(t[c],e[c])||(r=!1);break;default:t[c]!==e[c]&&(r=!1)}}),r},isEqualArray=(t,e)=>{if(Object.prototype.toString.call(t)!==Object.prototype.toString.call(e))return!1;if(t.length!==e.length)return!1;let r=!0;return t.forEach((t,c)=>{t!==e[c]&&(r=!1)}),r};exports.isEqualObj=isEqualObj;const cloneObj=function(t,e){let r={};return Object.keys(t).forEach(c=>{if(!e||e.includes(c))switch(Object.prototype.toString.call(t[c])){case"[object Object]":r[c]=cloneObj(t[c]);break;case"[object Array]":r[c]=cloneArray(t[c]);break;default:r[c]=t[c]}}),r},cloneArray=t=>t.map(t=>{switch(Object.prototype.toString.call(t)){case"[object Object]":return cloneObj(t);case"[object Array]":return cloneArray(t);default:return t}});exports.cloneObj=cloneObj,exports.isProxyNeeded=(t=>{const e=Object.prototype.toString.call(t);return"[object Object]"===e||"[object Array]"===e});